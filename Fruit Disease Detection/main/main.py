# -*- coding: utf-8 -*-
"""Mini_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12p44JBvLOT26jsctPSqO40DPeVYI2kQF
"""

from google.colab import drive
drive.mount('/content/drive')

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

# import the libraries as shown below

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
#from keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
#import matplotlib.pyplot as plt

# re-size all the images to this
IMAGE_SIZE = [224, 224]

train_path = '/content/drive/MyDrive/Papaya_Dataset/train'
valid_path = '/content/drive/MyDrive/Papaya_Dataset/test'

# Import the Vgg 16 library as shown below and add preprocessing layer to the front of VGG
# Here we will be using imagenet weights

inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# don't train existing weights
for layer in inception.layers:
    layer.trainable = False

# useful for getting number of output classes
folders = glob('/content/drive/MyDrive/Papaya_Dataset/train/*')

# our layers - you can add more if you want
x = Flatten()(inception.output)

prediction = Dense(len(folders), activation='softmax')(x)

# create a model object
model = Model(inputs=inception.input, outputs=prediction)

# view the structure of the model
model.summary()

# tell the model what cost and optimization method to use
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Use the Image Data Generator to import the images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Papaya_Dataset/train',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Papaya_Dataset/test',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

import matplotlib.pyplot as plt 
import matplotlib.image as mpimg

img = training_set.filepaths[np.random.random_integers(low=0,high=training_set.samples)]
# img = '/content/drive/MyDrive/Papaya_Dataset/train/anthracnose/a1.jpg'
print(img)
img = mpimg.imread(img)
plt.imshow(img)

# fit the model
# Run the cell. It will take some time to execute
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=20,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

plt.subplot(1, 2, 1)
plt.title('Training and test accuracy')
plt.plot(r.epoch, r.history['accuracy'], label='Training accuracy')
plt.plot(r.epoch, r.history['val_accuracy'], label='Test accuracy')
plt.xlabel("Epochs ") 
plt.ylabel("percentage")
plt.legend()

plt.subplot(1, 2, 2) 
plt.title('Training and test loss')
plt.plot(r.epoch, r.history['loss'], label='Training loss')
plt.plot(r.epoch, r.history['val_loss'], label='Test loss') 
plt.xlabel("Epochs ")
plt.ylabel("percentage")
plt.legend()

plt.show()

from sklearn.metrics import classification_report, confusion_matrix

test_set.reset()
predictions = model.predict_generator(test_set, steps=len(test_set)) 
y= np.argmax(predictions, axis=1)

print('Classification Report')
cr = classification_report(y_true=test_set.classes, y_pred=y, target_names=test_set.class_indices)
print(cr)

import pandas as pd
import seaborn as sn

print('Confusion Matrix')
cm = confusion_matrix(test_set.classes, y) 
df = pd.DataFrame(cm, columns=test_set.class_indices)
plt.figure(figsize=(10,8)) 
sn.heatmap(df, annot=True)

from tensorflow.keras.models import load_model

model.save('model_inception.h5')

# load best model
from keras.models import Model

from keras.models import load_model
model = load_model("/content/model_inception.h5")

acc = model.evaluate_generator(test_set)[1]
print((f"The accuracy of your model is {acc*100} %"))

from weakref import ref
import keras
from tensorflow.keras.utils import img_to_array

def predicition(path):
  img = load_img(path,target_size=(224,224))
  i=img_to_array(img)
  im = preprocess_input(i)
  img = np.expand_dims(im, axis=0)
  pred =np.argmax(model.predict(img))
  print(f"the image belongd to { ref[pred]} ")

from matplotlib import path
from keras.applications.vgg19 import VGG19, preprocess_input,decode_predictions
path = "/content/drive/MyDrive/Papaya_Dataset/test/ring_spot/r42.jpg"

predicition(path)

def predication(path):
  img = load_img(path,target_size=(224,224))
  i=img_to_array(img)
  im = preprocess_input(i)
  print(im.shape)

def predication(path):
  img = load_img(path,target_size=(224,224))
  i=img_to_array(img)
  im = preprocess_input(i)
  img = np.expand_dims(im, axis=0)
  pred = np.argmax(model.predict(img))
  print(pred)

training_set.class_indices

path = "/content/drive/MyDrive/Papaya_Dataset/test/phytophthora/p36.jpg"
predication(path)